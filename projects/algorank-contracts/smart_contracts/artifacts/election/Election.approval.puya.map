{
  "version": 3,
  "sources": [
    "../../election/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOQ;AAAkC;AAAlC;AAEA;AAAgC;AAAhC;AALR;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;AAAA;;AAAA;;;;;;AAAA;AAWK;;AAAA;;;;;AAIA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAEa;;AAAA;AACO;AAAA;AAAA;AAAA;;AACzB;;;AACmB;;;;;;;;;;;;;;;;;;;;;;AALd;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOG;;AAAA;;;;;;;;;;;;;AAAA;;AAAA;AACA;AAAyB;AAAzB;AACO;;;;;;;;;;;;;;AATV;;;AAeG;;AAAyB;;AAAzB;AACA;AAA0B;AAA1B;AALH;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;AAQA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEM;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAX;;;AACmB;;;;;;;;;;;;;;AAHd;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKoB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACb;;;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPd;;;AAQO;;AAAU;AAAV;AAAZ;;;AACmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AATd;;;AAWG;AAAA;;AAAA;AACA;;AAAA;AAA6B;AAA7B;AACO;;;;;;;;;;;;;;;;;;AAbV",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"verified\" \"commitment_sum\" \"verifier_set\" 0x151f7c75 \"verifier_pk\""
    },
    "61": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "63": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "66": {
      "op": "bytec_1 // \"commitment_sum\"",
      "defined_out": [
        "\"commitment_sum\""
      ],
      "stack_out": [
        "\"commitment_sum\""
      ]
    },
    "67": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"commitment_sum\"",
        "0"
      ],
      "stack_out": [
        "\"commitment_sum\"",
        "0"
      ]
    },
    "68": {
      "op": "app_global_put",
      "stack_out": []
    },
    "69": {
      "op": "bytec_2 // \"verifier_set\"",
      "defined_out": [
        "\"verifier_set\""
      ],
      "stack_out": [
        "\"verifier_set\""
      ]
    },
    "70": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"verifier_set\"",
        "0"
      ]
    },
    "71": {
      "op": "app_global_put",
      "stack_out": []
    },
    "72": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "74": {
      "op": "bz main_bare_routing@12",
      "stack_out": []
    },
    "77": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "79": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "80": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "81": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "83": {
      "op": "assert",
      "stack_out": []
    },
    "84": {
      "op": "pushbytess 0x9faa80cc 0x060e6663 0xe42341d3 // method \"cast_ballot(byte[])string\", method \"set_verifier()string\", method \"verify_ballot(address,uint64)string\"",
      "defined_out": [
        "Method(cast_ballot(byte[])string)",
        "Method(set_verifier()string)",
        "Method(verify_ballot(address,uint64)string)"
      ],
      "stack_out": [
        "Method(cast_ballot(byte[])string)",
        "Method(set_verifier()string)",
        "Method(verify_ballot(address,uint64)string)"
      ]
    },
    "101": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(cast_ballot(byte[])string)",
        "Method(set_verifier()string)",
        "Method(verify_ballot(address,uint64)string)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(cast_ballot(byte[])string)",
        "Method(set_verifier()string)",
        "Method(verify_ballot(address,uint64)string)",
        "tmp%6#0"
      ]
    },
    "104": {
      "op": "match cast_ballot set_verifier verify_ballot",
      "stack_out": []
    },
    "112": {
      "op": "err"
    },
    "113": {
      "block": "main_bare_routing@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "115": {
      "op": "switch main___algopy_default_create@13 main_register@14",
      "stack_out": []
    },
    "121": {
      "op": "err"
    },
    "122": {
      "block": "main_register@14",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "124": {
      "error": "can only call when not creating",
      "op": "return // on error: can only call when not creating",
      "defined_out": [],
      "stack_out": []
    },
    "125": {
      "block": "main___algopy_default_create@13",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "127": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "128": {
      "error": "can only call when creating",
      "op": "return // on error: can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "129": {
      "subroutine": "smart_contracts.election.contract.Election.cast_ballot[routing]",
      "params": {},
      "block": "cast_ballot",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "132": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "133": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "134": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "135": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "137": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "138": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "140": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "141": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "142": {
      "error": "invalid number of bytes for (len+uint8[])",
      "op": "assert // invalid number of bytes for (len+uint8[])",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "143": {
      "op": "extract 2 0",
      "defined_out": [
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0"
      ]
    },
    "146": {
      "op": "txn Sender"
    },
    "148": {
      "op": "dup"
    },
    "149": {
      "op": "intc_0 // 0"
    },
    "150": {
      "op": "bytec_0 // \"verified\"",
      "defined_out": [
        "\"verified\"",
        "0",
        "account#0",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "account#0",
        "0",
        "\"verified\""
      ]
    },
    "151": {
      "op": "app_local_get_ex",
      "defined_out": [
        "account#0",
        "exists#0",
        "ipfs_hash#0",
        "result#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "result#0",
        "exists#0"
      ]
    },
    "152": {
      "op": "bury 1",
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "exists#0"
      ]
    },
    "154": {
      "op": "bz cast_ballot_after_if_else@3",
      "stack_out": [
        "ipfs_hash#0",
        "account#0"
      ]
    },
    "157": {
      "op": "pushbytes \"Ballot already sent!\"",
      "defined_out": [
        "account#0",
        "ipfs_hash#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "tmp%2#0"
      ]
    },
    "179": {
      "block": "cast_ballot_after_inlined_smart_contracts.election.contract.Election.cast_ballot@4",
      "stack_in": [
        "ipfs_hash#0",
        "account#0",
        "tmp%2#0"
      ],
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "180": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "tmp%2#0",
        "aggregate%length%0#0"
      ]
    },
    "181": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "tmp%2#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "182": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "tmp%2#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "185": {
      "op": "swap",
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "aggregate%length_uint16%0#0",
        "tmp%2#0"
      ]
    },
    "186": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "187": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "188": {
      "op": "swap",
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "189": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "tmp%4#0"
      ]
    },
    "190": {
      "op": "log",
      "stack_out": [
        "ipfs_hash#0",
        "account#0"
      ]
    },
    "191": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "1"
      ]
    },
    "192": {
      "op": "return",
      "stack_out": [
        "ipfs_hash#0",
        "account#0"
      ]
    },
    "193": {
      "block": "cast_ballot_after_if_else@3",
      "stack_in": [
        "ipfs_hash#0",
        "account#0"
      ],
      "op": "dupn 2",
      "defined_out": [
        "account#0",
        "account#0 (copy)"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "account#0",
        "account#0 (copy)"
      ]
    },
    "195": {
      "op": "pushbytes \"ballot_ipfs\"",
      "defined_out": [
        "\"ballot_ipfs\"",
        "account#0",
        "account#0 (copy)"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "account#0",
        "account#0 (copy)",
        "\"ballot_ipfs\""
      ]
    },
    "208": {
      "op": "dig 4",
      "defined_out": [
        "\"ballot_ipfs\"",
        "account#0",
        "account#0 (copy)",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "account#0",
        "account#0 (copy)",
        "\"ballot_ipfs\"",
        "ipfs_hash#0"
      ]
    },
    "210": {
      "op": "app_local_put",
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "account#0"
      ]
    },
    "211": {
      "op": "bytec_0 // \"verified\"",
      "defined_out": [
        "\"verified\"",
        "account#0",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "account#0",
        "\"verified\""
      ]
    },
    "212": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"verified\"",
        "0",
        "account#0",
        "ipfs_hash#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "account#0",
        "\"verified\"",
        "0"
      ]
    },
    "213": {
      "op": "app_local_put",
      "stack_out": [
        "ipfs_hash#0",
        "account#0"
      ]
    },
    "214": {
      "op": "pushbytes \"Ballot cast!\"",
      "defined_out": [
        "account#0",
        "ipfs_hash#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "ipfs_hash#0",
        "account#0",
        "tmp%2#0"
      ]
    },
    "228": {
      "op": "b cast_ballot_after_inlined_smart_contracts.election.contract.Election.cast_ballot@4"
    },
    "231": {
      "subroutine": "smart_contracts.election.contract.Election.set_verifier[routing]",
      "params": {},
      "block": "set_verifier",
      "stack_in": [],
      "op": "bytec 4 // \"verifier_pk\"",
      "defined_out": [
        "\"verifier_pk\""
      ],
      "stack_out": [
        "\"verifier_pk\""
      ]
    },
    "233": {
      "op": "txn Sender",
      "defined_out": [
        "\"verifier_pk\"",
        "tmp%0#1"
      ],
      "stack_out": [
        "\"verifier_pk\"",
        "tmp%0#1"
      ]
    },
    "235": {
      "op": "app_global_put",
      "stack_out": []
    },
    "236": {
      "op": "bytec_2 // \"verifier_set\"",
      "defined_out": [
        "\"verifier_set\""
      ],
      "stack_out": [
        "\"verifier_set\""
      ]
    },
    "237": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"verifier_set\"",
        "1"
      ],
      "stack_out": [
        "\"verifier_set\"",
        "1"
      ]
    },
    "238": {
      "op": "app_global_put",
      "stack_out": []
    },
    "239": {
      "op": "pushbytes 0x151f7c75000c566572696669657220736574",
      "defined_out": [
        "0x151f7c75000c566572696669657220736574"
      ],
      "stack_out": [
        "0x151f7c75000c566572696669657220736574"
      ]
    },
    "259": {
      "op": "log",
      "stack_out": []
    },
    "260": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "261": {
      "op": "return",
      "stack_out": []
    },
    "262": {
      "subroutine": "smart_contracts.election.contract.Election.verify_ballot[routing]",
      "params": {},
      "block": "verify_ballot",
      "stack_in": [],
      "op": "pushbytes \"\"",
      "stack_out": [
        "result#0"
      ]
    },
    "264": {
      "op": "txna ApplicationArgs 1"
    },
    "267": {
      "op": "dup",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "for_account#0"
      ]
    },
    "268": {
      "op": "len",
      "defined_out": [
        "for_account#0",
        "len%0#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "len%0#0"
      ]
    },
    "269": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "for_account#0",
        "len%0#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "len%0#0",
        "32"
      ]
    },
    "271": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "for_account#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "eq%0#0"
      ]
    },
    "272": {
      "error": "invalid number of bytes for uint8[32]",
      "op": "assert // invalid number of bytes for uint8[32]",
      "stack_out": [
        "result#0",
        "for_account#0"
      ]
    },
    "273": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "for_account#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "tmp%2#0"
      ]
    },
    "276": {
      "op": "dup",
      "defined_out": [
        "for_account#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "277": {
      "op": "len",
      "defined_out": [
        "for_account#0",
        "len%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "278": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "for_account#0",
        "len%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "280": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "for_account#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "281": {
      "error": "invalid number of bytes for uint64",
      "op": "assert // invalid number of bytes for uint64",
      "stack_out": [
        "result#0",
        "for_account#0",
        "tmp%2#0"
      ]
    },
    "282": {
      "op": "btoi",
      "defined_out": [
        "for_account#0",
        "new_commitment_sum#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0"
      ]
    },
    "283": {
      "op": "txn Sender",
      "defined_out": [
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%0#1"
      ]
    },
    "285": {
      "op": "intc_0 // 0",
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%0#1",
        "0"
      ]
    },
    "286": {
      "op": "bytec 4 // \"verifier_pk\"",
      "defined_out": [
        "\"verifier_pk\"",
        "0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%0#1",
        "0",
        "\"verifier_pk\""
      ]
    },
    "288": {
      "op": "app_global_get_ex",
      "defined_out": [
        "for_account#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "new_commitment_sum#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "289": {
      "error": "check self.verifier_pk exists",
      "op": "assert // check self.verifier_pk exists",
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "290": {
      "op": "!=",
      "defined_out": [
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%1#1"
      ]
    },
    "291": {
      "op": "bz verify_ballot_after_if_else@3",
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0"
      ]
    },
    "294": {
      "op": "pushbytes \"Unauthorized\"",
      "defined_out": [
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%4#0"
      ]
    },
    "308": {
      "block": "verify_ballot_after_inlined_smart_contracts.election.contract.Election.verify_ballot@8",
      "stack_in": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%4#0"
      ],
      "op": "dup",
      "defined_out": [
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "309": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%4#0",
        "aggregate%length%0#0"
      ]
    },
    "310": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%4#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "311": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%4#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "314": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "aggregate%length_uint16%0#0",
        "tmp%4#0"
      ]
    },
    "315": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "aggregate%encoded_value%0#0"
      ]
    },
    "316": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "317": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "318": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%6#0"
      ]
    },
    "319": {
      "op": "log",
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0"
      ]
    },
    "320": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "1"
      ]
    },
    "321": {
      "op": "return",
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0"
      ]
    },
    "322": {
      "block": "verify_ballot_after_if_else@3",
      "stack_in": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "for_account#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "for_account#0"
      ]
    },
    "324": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "for_account#0",
        "0"
      ]
    },
    "325": {
      "op": "bytec_0 // \"verified\"",
      "defined_out": [
        "\"verified\"",
        "0",
        "for_account#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "for_account#0",
        "0",
        "\"verified\""
      ]
    },
    "326": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exists#0",
        "for_account#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "result#0",
        "exists#0"
      ]
    },
    "327": {
      "op": "swap",
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "exists#0",
        "result#0"
      ]
    },
    "328": {
      "op": "bury 4",
      "defined_out": [
        "exists#0",
        "for_account#0",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "exists#0"
      ]
    },
    "330": {
      "op": "bnz verify_ballot_after_if_else@5",
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0"
      ]
    },
    "333": {
      "op": "pushbytes \"Account has not cast a ballot!\"",
      "defined_out": [
        "for_account#0",
        "result#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%4#0"
      ]
    },
    "365": {
      "op": "b verify_ballot_after_inlined_smart_contracts.election.contract.Election.verify_ballot@8"
    },
    "368": {
      "block": "verify_ballot_after_if_else@5",
      "stack_in": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0"
      ],
      "op": "dig 2",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "result#0"
      ]
    },
    "370": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "result#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "result#0",
        "1"
      ]
    },
    "371": {
      "op": "==",
      "defined_out": [
        "result#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%2#1"
      ]
    },
    "372": {
      "op": "bz verify_ballot_after_if_else@7",
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0"
      ]
    },
    "375": {
      "op": "pushbytes \"This ballot is already verified!\"",
      "defined_out": [
        "result#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%4#0"
      ]
    },
    "409": {
      "op": "b verify_ballot_after_inlined_smart_contracts.election.contract.Election.verify_ballot@8"
    },
    "412": {
      "block": "verify_ballot_after_if_else@7",
      "stack_in": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0"
      ],
      "op": "bytec_1 // \"commitment_sum\"",
      "defined_out": [
        "\"commitment_sum\""
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "\"commitment_sum\""
      ]
    },
    "413": {
      "op": "dig 1",
      "defined_out": [
        "\"commitment_sum\"",
        "new_commitment_sum#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "\"commitment_sum\"",
        "new_commitment_sum#0"
      ]
    },
    "415": {
      "op": "app_global_put",
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0"
      ]
    },
    "416": {
      "op": "dig 1",
      "defined_out": [
        "for_account#0",
        "new_commitment_sum#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "for_account#0"
      ]
    },
    "418": {
      "op": "bytec_0 // \"verified\"",
      "defined_out": [
        "\"verified\"",
        "for_account#0",
        "new_commitment_sum#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "for_account#0",
        "\"verified\""
      ]
    },
    "419": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"verified\"",
        "1",
        "for_account#0",
        "new_commitment_sum#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "for_account#0",
        "\"verified\"",
        "1"
      ]
    },
    "420": {
      "op": "app_local_put",
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0"
      ]
    },
    "421": {
      "op": "pushbytes \"Verified ballot!\"",
      "defined_out": [
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "result#0",
        "for_account#0",
        "new_commitment_sum#0",
        "tmp%4#0"
      ]
    },
    "439": {
      "op": "b verify_ballot_after_inlined_smart_contracts.election.contract.Election.verify_ballot@8"
    }
  }
}
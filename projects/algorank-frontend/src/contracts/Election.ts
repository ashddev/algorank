/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Election","structs":{},"methods":[{"name":"cast_ballot","args":[{"type":"byte[]","name":"ipfs_hash"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"verify_ballot","args":[{"type":"address","name":"for_account"},{"type":"uint64","name":"new_commitment_sum"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":1},"local":{"ints":1,"bytes":1}},"keys":{"global":{"commitment_sum":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29tbWl0bWVudF9zdW0="},"verifier_pk":{"keyType":"AVMString","valueType":"address","key":"dmVyaWZpZXJfcGs="}},"local":{"ballot_ipfs":{"keyType":"AVMString","valueType":"AVMBytes","key":"YmFsbG90X2lwZnM="},"verified":{"keyType":"AVMString","valueType":"AVMUint64","key":"dmVyaWZpZWQ="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":["OptIn"]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[52],"errorMessage":"OnCompletion must be NoOp"},{"pc":[93],"errorMessage":"can only call when creating"},{"pc":[89],"errorMessage":"can only call when not creating"},{"pc":[107],"errorMessage":"invalid number of bytes for (len+uint8[])"},{"pc":[214],"errorMessage":"invalid number of bytes for uint64"},{"pc":[205],"errorMessage":"invalid number of bytes for uint8[32]"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEKICAgIGJ5dGVjYmxvY2sgInZlcmlmaWVkIiAiY29tbWl0bWVudF9zdW0iIDB4MTUxZjdjNzUKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lbGVjdGlvbi9jb250cmFjdC5weTo3LTgKICAgIC8vICMgLS0tLSBHbG9iYWwgc3RvcmFnZQogICAgLy8gc2VsZi5jb21taXRtZW50X3N1bSA9IEdsb2JhbFN0YXRlKFVJbnQ2NCgwKSkKICAgIGJ5dGVjXzEgLy8gImNvbW1pdG1lbnRfc3VtIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lbGVjdGlvbi9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBFbGVjdGlvbihBUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDExCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydAogICAgcHVzaGJ5dGVzcyAweDlmYWE4MGNjIDB4ZTQyMzQxZDMgLy8gbWV0aG9kICJjYXN0X2JhbGxvdChieXRlW10pc3RyaW5nIiwgbWV0aG9kICJ2ZXJpZnlfYmFsbG90KGFkZHJlc3MsdWludDY0KXN0cmluZyIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIGNhc3RfYmFsbG90IHZlcmlmeV9iYWxsb3QKICAgIGVycgoKbWFpbl9iYXJlX3JvdXRpbmdAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZWxlY3Rpb24vY29udHJhY3QucHk6NQogICAgLy8gY2xhc3MgRWxlY3Rpb24oQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIHN3aXRjaCBtYWluX19fYWxnb3B5X2RlZmF1bHRfY3JlYXRlQDEyIG1haW5fcmVnaXN0ZXJAMTMKICAgIGVycgoKbWFpbl9yZWdpc3RlckAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lbGVjdGlvbi9jb250cmFjdC5weToxNQogICAgLy8gQGJhcmVtZXRob2QoYWxsb3dfYWN0aW9ucz1bIk9wdEluIl0pCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgcmV0dXJuIC8vIG9uIGVycm9yOiBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCgptYWluX19fYWxnb3B5X2RlZmF1bHRfY3JlYXRlQDEyOgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIHJldHVybiAvLyBvbiBlcnJvcjogY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCgoKLy8gc21hcnRfY29udHJhY3RzLmVsZWN0aW9uLmNvbnRyYWN0LkVsZWN0aW9uLmNhc3RfYmFsbG90W3JvdXRpbmddKCkgLT4gdm9pZDoKY2FzdF9iYWxsb3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZWxlY3Rpb24vY29udHJhY3QucHk6MTkKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIHB1c2hpbnQgMiAvLyAyCiAgICArCiAgICBkaWcgMQogICAgbGVuCiAgICA9PQogICAgYXNzZXJ0IC8vIGludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIGZvciAobGVuK3VpbnQ4W10pCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2VsZWN0aW9uL2NvbnRyYWN0LnB5OjIxCiAgICAvLyBhY2NvdW50ID0gVHhuLnNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZWxlY3Rpb24vY29udHJhY3QucHk6MjIKICAgIC8vIHJlc3VsdCwgZXhpc3RzID0gc2VsZi52ZXJpZmllZC5tYXliZShhY2NvdW50KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gInZlcmlmaWVkIgogICAgYXBwX2xvY2FsX2dldF9leAogICAgYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZWxlY3Rpb24vY29udHJhY3QucHk6MjMKICAgIC8vIGlmIChleGlzdHMpOgogICAgYnogY2FzdF9iYWxsb3RfYWZ0ZXJfaWZfZWxzZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZWxlY3Rpb24vY29udHJhY3QucHk6MjQKICAgIC8vIHJldHVybiBTdHJpbmcoIkJhbGxvdCBhbHJlYWR5IHNlbnQhIikKICAgIHB1c2hieXRlcyAiQmFsbG90IGFscmVhZHkgc2VudCEiCgpjYXN0X2JhbGxvdF9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5lbGVjdGlvbi5jb250cmFjdC5FbGVjdGlvbi5jYXN0X2JhbGxvdEA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VsZWN0aW9uL2NvbnRyYWN0LnB5OjE5CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgpjYXN0X2JhbGxvdF9hZnRlcl9pZl9lbHNlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZWxlY3Rpb24vY29udHJhY3QucHk6MjYKICAgIC8vIHNlbGYuYmFsbG90X2lwZnNbYWNjb3VudF0gPSBpcGZzX2hhc2gKICAgIGR1cG4gMgogICAgcHVzaGJ5dGVzICJiYWxsb3RfaXBmcyIKICAgIGRpZyA0CiAgICBhcHBfbG9jYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZWxlY3Rpb24vY29udHJhY3QucHk6MjcKICAgIC8vIHNlbGYudmVyaWZpZWRbYWNjb3VudF0gPSBVSW50NjQoMCkKICAgIGJ5dGVjXzAgLy8gInZlcmlmaWVkIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9sb2NhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lbGVjdGlvbi9jb250cmFjdC5weToyOAogICAgLy8gcmV0dXJuIFN0cmluZygiQmFsbG90IGNhc3QhIikKICAgIHB1c2hieXRlcyAiQmFsbG90IGNhc3QhIgogICAgLy8gc21hcnRfY29udHJhY3RzL2VsZWN0aW9uL2NvbnRyYWN0LnB5OjE5CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGIgY2FzdF9iYWxsb3RfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMuZWxlY3Rpb24uY29udHJhY3QuRWxlY3Rpb24uY2FzdF9iYWxsb3RANAoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5lbGVjdGlvbi5jb250cmFjdC5FbGVjdGlvbi52ZXJpZnlfYmFsbG90W3JvdXRpbmddKCkgLT4gdm9pZDoKdmVyaWZ5X2JhbGxvdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lbGVjdGlvbi9jb250cmFjdC5weTozMQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBkdXBuIDIKICAgIGxlbgogICAgcHVzaGludCAzMiAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBpbnZhbGlkIG51bWJlciBvZiBieXRlcyBmb3IgdWludDhbMzJdCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBkdXAKICAgIGxlbgogICAgcHVzaGludCA4IC8vIDgKICAgID09CiAgICBhc3NlcnQgLy8gaW52YWxpZCBudW1iZXIgb2YgYnl0ZXMgZm9yIHVpbnQ2NAogICAgYnRvaQogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL2VsZWN0aW9uL2NvbnRyYWN0LnB5OjMzCiAgICAvLyByZXN1bHQsIGV4aXN0cyA9IHNlbGYudmVyaWZpZWQubWF5YmUoZm9yX2FjY291bnQpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAidmVyaWZpZWQiCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICAvLyBzbWFydF9jb250cmFjdHMvZWxlY3Rpb24vY29udHJhY3QucHk6MzQKICAgIC8vIGlmIChub3QgZXhpc3RzKToKICAgIGJueiB2ZXJpZnlfYmFsbG90X2FmdGVyX2lmX2Vsc2VAMwogICAgLy8gc21hcnRfY29udHJhY3RzL2VsZWN0aW9uL2NvbnRyYWN0LnB5OjM1CiAgICAvLyByZXR1cm4gU3RyaW5nKCJBY2NvdW50IGhhcyBub3QgY2FzdCBhIGJhbGxvdCEiKQogICAgcHVzaGJ5dGVzICJBY2NvdW50IGhhcyBub3QgY2FzdCBhIGJhbGxvdCEiCgp2ZXJpZnlfYmFsbG90X2FmdGVyX2lubGluZWRfc21hcnRfY29udHJhY3RzLmVsZWN0aW9uLmNvbnRyYWN0LkVsZWN0aW9uLnZlcmlmeV9iYWxsb3RANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lbGVjdGlvbi9jb250cmFjdC5weTozMQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKdmVyaWZ5X2JhbGxvdF9hZnRlcl9pZl9lbHNlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZWxlY3Rpb24vY29udHJhY3QucHk6MzYKICAgIC8vIGlmIChyZXN1bHQgPT0gMSk6CiAgICBkdXAKICAgIGludGNfMSAvLyAxCiAgICA9PQogICAgYnogdmVyaWZ5X2JhbGxvdF9hZnRlcl9pZl9lbHNlQDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lbGVjdGlvbi9jb250cmFjdC5weTozNwogICAgLy8gcmV0dXJuIFN0cmluZygiVGhpcyBiYWxsb3QgaXMgYWxyZWFkeSB2ZXJpZmllZCEiKQogICAgcHVzaGJ5dGVzICJUaGlzIGJhbGxvdCBpcyBhbHJlYWR5IHZlcmlmaWVkISIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lbGVjdGlvbi9jb250cmFjdC5weTozMQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBiIHZlcmlmeV9iYWxsb3RfYWZ0ZXJfaW5saW5lZF9zbWFydF9jb250cmFjdHMuZWxlY3Rpb24uY29udHJhY3QuRWxlY3Rpb24udmVyaWZ5X2JhbGxvdEA2Cgp2ZXJpZnlfYmFsbG90X2FmdGVyX2lmX2Vsc2VANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lbGVjdGlvbi9jb250cmFjdC5weTozOQogICAgLy8gc2VsZi5jb21taXRtZW50X3N1bS52YWx1ZSA9IG5ld19jb21taXRtZW50X3N1bQogICAgYnl0ZWNfMSAvLyAiY29tbWl0bWVudF9zdW0iCiAgICBkaWcgMgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lbGVjdGlvbi9jb250cmFjdC5weTo0MAogICAgLy8gc2VsZi52ZXJpZmllZFtmb3JfYWNjb3VudF0gPSBVSW50NjQoMSkKICAgIGRpZyAyCiAgICBieXRlY18wIC8vICJ2ZXJpZmllZCIKICAgIGludGNfMSAvLyAxCiAgICBhcHBfbG9jYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZWxlY3Rpb24vY29udHJhY3QucHk6NDEKICAgIC8vIHJldHVybiBTdHJpbmcoIlZlcmlmaWVkIGJhbGxvdCEiKQogICAgcHVzaGJ5dGVzICJWZXJpZmllZCBiYWxsb3QhIgogICAgLy8gc21hcnRfY29udHJhY3RzL2VsZWN0aW9uL2NvbnRyYWN0LnB5OjMxCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGIgdmVyaWZ5X2JhbGxvdF9hZnRlcl9pbmxpbmVkX3NtYXJ0X2NvbnRyYWN0cy5lbGVjdGlvbi5jb250cmFjdC5FbGVjdGlvbi52ZXJpZnlfYmFsbG90QDYK","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyACAAEmAwh2ZXJpZmllZA5jb21taXRtZW50X3N1bQQVH3x1MRhAAAMpImcxG0EAHTEZFEQxGESCAgSfqoDMBOQjQdM2GgCOAgARAHcAMRmNAgAEAAEAMRhDMRgUQzYaAUkiWYECCEsBFRJEVwIAMQBJIihjRQFBACSAFEJhbGxvdCBhbHJlYWR5IHNlbnQhSRUWVwYCTFAqTFCwI0NHAoALYmFsbG90X2lwZnNLBGYoImaADEJhbGxvdCBjYXN0IUL/zDYaAUcCFYEgEkQ2GgJJFYEIEkQXTCIoY0AALoAeQWNjb3VudCBoYXMgbm90IGNhc3QgYSBiYWxsb3QhSRUWVwYCTFAqTFCwI0NJIxJBACWAIFRoaXMgYmFsbG90IGlzIGFscmVhZHkgdmVyaWZpZWQhQv/HKUsCZ0sCKCNmgBBWZXJpZmllZCBiYWxsb3QhQv+p","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":5,"minor":2,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Election contract
 */
export type ElectionArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'cast_ballot(byte[])string': {
      ipfsHash: Uint8Array
    }
    'verify_ballot(address,uint64)string': {
      forAccount: string
      newCommitmentSum: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'cast_ballot(byte[])string': [ipfsHash: Uint8Array]
    'verify_ballot(address,uint64)string': [forAccount: string, newCommitmentSum: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type ElectionReturns = {
  'cast_ballot(byte[])string': string
  'verify_ballot(address,uint64)string': string
}

/**
 * Defines the types of available calls and state of the Election smart contract.
 */
export type ElectionTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'cast_ballot(byte[])string' | 'cast_ballot', {
      argsObj: ElectionArgs['obj']['cast_ballot(byte[])string']
      argsTuple: ElectionArgs['tuple']['cast_ballot(byte[])string']
      returns: ElectionReturns['cast_ballot(byte[])string']
    }>
    & Record<'verify_ballot(address,uint64)string' | 'verify_ballot', {
      argsObj: ElectionArgs['obj']['verify_ballot(address,uint64)string']
      argsTuple: ElectionArgs['tuple']['verify_ballot(address,uint64)string']
      returns: ElectionReturns['verify_ballot(address,uint64)string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        commitmentSum: bigint
        verifierPk: string
      }
      maps: {}
    }
    local: {
      keys: {
        ballotIpfs: BinaryState
        verified: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ElectionSignatures = keyof ElectionTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ElectionNonVoidMethodSignatures = keyof ElectionTypes['methods'] extends infer T ? T extends keyof ElectionTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Election smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ElectionSignatures> = ElectionTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Election smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ElectionSignatures> = ElectionTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ElectionTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = ElectionTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ElectionCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ElectionDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ElectionCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Election smart contract
 */
export abstract class ElectionParamsFactory {
  /**
   * Constructs a no op call for the cast_ballot(byte[])string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static castBallot(params: CallParams<ElectionArgs['obj']['cast_ballot(byte[])string'] | ElectionArgs['tuple']['cast_ballot(byte[])string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cast_ballot(byte[])string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ipfsHash],
    }
  }
  /**
   * Constructs a no op call for the verify_ballot(address,uint64)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verifyBallot(params: CallParams<ElectionArgs['obj']['verify_ballot(address,uint64)string'] | ElectionArgs['tuple']['verify_ballot(address,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verify_ballot(address,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.forAccount, params.args.newCommitmentSum],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Election smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ElectionFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ElectionFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ElectionClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ElectionClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Election smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ElectionDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new ElectionClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Election smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Election smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Election smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new ElectionClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Election smart contract
 */
export class ElectionClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ElectionClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Election app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ElectionClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ElectionNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ElectionClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ElectionClient> {
    return new ElectionClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ElectionClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ElectionClient> {
    return new ElectionClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Election smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Election smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Election smart contract using the `cast_ballot(byte[])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    castBallot: (params: CallParams<ElectionArgs['obj']['cast_ballot(byte[])string'] | ElectionArgs['tuple']['cast_ballot(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ElectionParamsFactory.castBallot(params))
    },

    /**
     * Makes a call to the Election smart contract using the `verify_ballot(address,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    verifyBallot: (params: CallParams<ElectionArgs['obj']['verify_ballot(address,uint64)string'] | ElectionArgs['tuple']['verify_ballot(address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ElectionParamsFactory.verifyBallot(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Election smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Election smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Election smart contract using the `cast_ballot(byte[])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    castBallot: (params: CallParams<ElectionArgs['obj']['cast_ballot(byte[])string'] | ElectionArgs['tuple']['cast_ballot(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ElectionParamsFactory.castBallot(params))
    },

    /**
     * Makes a call to the Election smart contract using the `verify_ballot(address,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    verifyBallot: (params: CallParams<ElectionArgs['obj']['verify_ballot(address,uint64)string'] | ElectionArgs['tuple']['verify_ballot(address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ElectionParamsFactory.verifyBallot(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the Election smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the Election smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Election smart contract using the `cast_ballot(byte[])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    castBallot: async (params: CallParams<ElectionArgs['obj']['cast_ballot(byte[])string'] | ElectionArgs['tuple']['cast_ballot(byte[])string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ElectionParamsFactory.castBallot(params))
      return {...result, return: result.return as unknown as (undefined | ElectionReturns['cast_ballot(byte[])string'])}
    },

    /**
     * Makes a call to the Election smart contract using the `verify_ballot(address,uint64)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    verifyBallot: async (params: CallParams<ElectionArgs['obj']['verify_ballot(address,uint64)string'] | ElectionArgs['tuple']['verify_ballot(address,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ElectionParamsFactory.verifyBallot(params))
      return {...result, return: result.return as unknown as (undefined | ElectionReturns['verify_ballot(address,uint64)string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ElectionClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Election app
   */
  state = {
    /**
     * Methods to access global state for the current Election app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          commitmentSum: result.commitment_sum,
          verifierPk: result.verifier_pk,
        }
      },
      /**
       * Get the current value of the commitment_sum key in global state
       */
      commitmentSum: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("commitment_sum")) as bigint | undefined },
      /**
       * Get the current value of the verifier_pk key in global state
       */
      verifierPk: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("verifier_pk")) as string | undefined },
    },
    /**
     * Methods to access local state for the current Election app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            ballotIpfs: new BinaryStateValue(result.ballot_ipfs),
            verified: result.verified,
          }
        },
        /**
         * Get the current value of the ballot_ipfs key in local state
         */
        ballotIpfs: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue("ballot_ipfs")) as Uint8Array | undefined) },
        /**
         * Get the current value of the verified key in local state
         */
        verified: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("verified")) as bigint | undefined },
      }
    },
  }

  public newGroup(): ElectionComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a cast_ballot(byte[])string method call against the Election contract
       */
      castBallot(params: CallParams<ElectionArgs['obj']['cast_ballot(byte[])string'] | ElectionArgs['tuple']['cast_ballot(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.castBallot(params)))
        resultMappers.push((v) => client.decodeReturnValue('cast_ballot(byte[])string', v))
        return this
      },
      /**
       * Add a verify_ballot(address,uint64)string method call against the Election contract
       */
      verifyBallot(params: CallParams<ElectionArgs['obj']['verify_ballot(address,uint64)string'] | ElectionArgs['tuple']['verify_ballot(address,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verifyBallot(params)))
        resultMappers.push((v) => client.decodeReturnValue('verify_ballot(address,uint64)string', v))
        return this
      },
      get optIn() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppCall(client.params.optIn.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Election contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ElectionComposer
  }
}
export type ElectionComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the cast_ballot(byte[])string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  castBallot(params?: CallParams<ElectionArgs['obj']['cast_ballot(byte[])string'] | ElectionArgs['tuple']['cast_ballot(byte[])string']>): ElectionComposer<[...TReturns, ElectionReturns['cast_ballot(byte[])string'] | undefined]>

  /**
   * Calls the verify_ballot(address,uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyBallot(params?: CallParams<ElectionArgs['obj']['verify_ballot(address,uint64)string'] | ElectionArgs['tuple']['verify_ballot(address,uint64)string']>): ElectionComposer<[...TReturns, ElectionReturns['verify_ballot(address,uint64)string'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Election smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): ElectionComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Election smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ElectionComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ElectionComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ElectionComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ElectionComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ElectionComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ElectionComposerResults<TReturns>>
}
export type ElectionComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

